// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Order {
  id  String @id @default(cuid())
  fid String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model InviteCode {
  id     String  @id @default(cuid())
  active Boolean @default(true)
  limit  Int     @default(1)
  note   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  claims User[]
}

model Otp {
  id     String  @id @default(cuid())
  code   String  @unique @default(cuid())
  active Boolean @default(false)
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String  @id
  name      String
  avatarUrl String?
  email     String? @unique
  plan      String  @default("basic")
  role      String  @default("user")

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  moderatedChannels ModeratedChannel[]
  invite            InviteCode?        @relation(fields: [inviteCodeId], references: [id])
  inviteCodeId      String?
  otps              Otp[]
  TeamUser          TeamUser[]
}

model Team {
  id      String     @id
  name    String
  members TeamUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamUser {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role   String @default("member")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModeratedChannel {
  id             String          @id
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  active         Boolean         @default(true)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  banThreshold   Int?
  ruleSets       RuleSet[]
  moderationLogs ModerationLog[]
  cooldowns      Cooldown[]
}

model RuleSet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  target    String   @default("all")
  rule      String // Stores JSON string of rules
  actions   String // Stores JSON string of actions

  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String
}

model ModerationLog {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  action                String
  reason                String
  castHash              String?
  actor                 String           @default("system")
  affectedUserFid       String
  affectedUsername      String
  affectedUserAvatarUrl String?
  channel               ModeratedChannel @relation(fields: [channelId], references: [id])
  channelId             String
}

model Cooldown {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  active         Boolean          @default(true)
  affectedUserId String
  channel        ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId      String
  expiresAt      DateTime?

  @@unique([affectedUserId, channelId])
}
